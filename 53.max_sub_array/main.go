package main

//给定一个整数数组 nums，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。
//示例 1：
//
//输入：nums = [-2,1,-3,4,-1,2,1,-5,4]
//输出：6
//解释：连续子数组[4,-1,2,1] 的和最大，为6 。

// 大概率需要两个指针维护一个窗口，所以就看窗口的维护策略了
// 一个最大的序列，必然是开头正数，结尾正数（除非整个数组没有正数）
// 如果选择了下一个会直接导致目前结果变成负数，怎没必要再选择了，因为此时必然会创造一个负数前缀
func maxSubArray(nums []int) int {
	sum, max := nums[0], nums[0]

	for i := 1; i < len(nums); i++ {
		// 核心思路，负数前缀宁可不要
		if sum <= 0 {
			sum = 0
		}
		sum += nums[i]
		if max < sum {
			max = sum
		}
	}

	return max
}
